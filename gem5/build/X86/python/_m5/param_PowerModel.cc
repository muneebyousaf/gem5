/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:62
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/PowerModel.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "sim/power/power_model.hh"

#include "base/temperature.hh"
#include <vector>
#include "sim/power/power_model.hh"
#include "enums/PMType.hh"
#include "sim/sub_system.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_PowerModel");
    py::class_<PowerModelParams, SimObjectParams, std::unique_ptr<PowerModelParams, py::nodelete>>(m, "PowerModelParams")
        .def(py::init<>())
        .def("create", &PowerModelParams::create)
        .def_readwrite("ambient_temp", &PowerModelParams::ambient_temp)
        .def_readwrite("pm", &PowerModelParams::pm)
        .def_readwrite("pm_type", &PowerModelParams::pm_type)
        .def_readwrite("subsystem", &PowerModelParams::subsystem)
        ;

    py::class_<gem5::PowerModel, gem5::SimObject, std::unique_ptr<gem5::PowerModel, py::nodelete>>(m, "gem5_COLONS_PowerModel")
        .def("getDynamicPower", &gem5::PowerModel::getDynamicPower)
        .def("getStaticPower", &gem5::PowerModel::getStaticPower)
        ;

}

static EmbeddedPyBind embed_obj("PowerModel", module_init, "SimObject");

} // namespace gem5

namespace gem5
{

namespace
{

class DummyPowerModelParamsClass
{
  public:
    gem5::PowerModel *create() const;
};

template <class CxxClass, class Enable=void>
class DummyPowerModelShunt;

template <class CxxClass>
class DummyPowerModelShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass,
        const PowerModelParams &>>>
{
  public:
    using Params = PowerModelParams;
    static gem5::PowerModel *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummyPowerModelShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass,
        const PowerModelParams &>>>
{
  public:
    using Params = DummyPowerModelParamsClass;
    static gem5::PowerModel *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

[[maybe_unused]] gem5::PowerModel *
DummyPowerModelShunt<gem5::PowerModel>::Params::create() const
{
    return DummyPowerModelShunt<gem5::PowerModel>::
        create(*this);
}

} // namespace gem5
