/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:62
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/TournamentBP.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "cpu/pred/tournament.hh"

#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_TournamentBP");
    py::class_<TournamentBPParams, BranchPredictorParams, std::unique_ptr<TournamentBPParams, py::nodelete>>(m, "TournamentBPParams")
        .def(py::init<>())
        .def("create", &TournamentBPParams::create)
        .def_readwrite("choiceCtrBits", &TournamentBPParams::choiceCtrBits)
        .def_readwrite("choicePredictorSize", &TournamentBPParams::choicePredictorSize)
        .def_readwrite("globalCtrBits", &TournamentBPParams::globalCtrBits)
        .def_readwrite("globalPredictorSize", &TournamentBPParams::globalPredictorSize)
        .def_readwrite("localCtrBits", &TournamentBPParams::localCtrBits)
        .def_readwrite("localHistoryTableSize", &TournamentBPParams::localHistoryTableSize)
        .def_readwrite("localPredictorSize", &TournamentBPParams::localPredictorSize)
        ;

    py::class_<gem5::branch_prediction::TournamentBP, gem5::branch_prediction::BPredUnit, std::unique_ptr<gem5::branch_prediction::TournamentBP, py::nodelete>>(m, "gem5_COLONS_branch_prediction_COLONS_TournamentBP")
        ;

}

static EmbeddedPyBind embed_obj("TournamentBP", module_init, "BranchPredictor");

} // namespace gem5

namespace gem5
{

namespace
{

class DummyTournamentBPParamsClass
{
  public:
    gem5::branch_prediction::TournamentBP *create() const;
};

template <class CxxClass, class Enable=void>
class DummyTournamentBPShunt;

template <class CxxClass>
class DummyTournamentBPShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass,
        const TournamentBPParams &>>>
{
  public:
    using Params = TournamentBPParams;
    static gem5::branch_prediction::TournamentBP *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummyTournamentBPShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass,
        const TournamentBPParams &>>>
{
  public:
    using Params = DummyTournamentBPParamsClass;
    static gem5::branch_prediction::TournamentBP *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

[[maybe_unused]] gem5::branch_prediction::TournamentBP *
DummyTournamentBPShunt<gem5::branch_prediction::TournamentBP>::Params::create() const
{
    return DummyTournamentBPShunt<gem5::branch_prediction::TournamentBP>::
        create(*this);
}

} // namespace gem5
