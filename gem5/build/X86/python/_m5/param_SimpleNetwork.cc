/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:62
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/SimpleNetwork.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "mem/ruby/network/simple/SimpleNetwork.hh"

#include "base/types.hh"
#include "base/types.hh"
#include <vector>
#include "mem/ruby/network/MessageBuffer.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_SimpleNetwork");
    py::class_<SimpleNetworkParams, RubyNetworkParams, std::unique_ptr<SimpleNetworkParams, py::nodelete>>(m, "SimpleNetworkParams")
        .def(py::init<>())
        .def("create", &SimpleNetworkParams::create)
        .def_readwrite("adaptive_routing", &SimpleNetworkParams::adaptive_routing)
        .def_readwrite("buffer_size", &SimpleNetworkParams::buffer_size)
        .def_readwrite("endpoint_bandwidth", &SimpleNetworkParams::endpoint_bandwidth)
        .def_readwrite("int_link_buffers", &SimpleNetworkParams::int_link_buffers)
        ;

    py::class_<gem5::ruby::SimpleNetwork, gem5::ruby::Network, std::unique_ptr<gem5::ruby::SimpleNetwork, py::nodelete>>(m, "gem5_COLONS_ruby_COLONS_SimpleNetwork")
        ;

}

static EmbeddedPyBind embed_obj("SimpleNetwork", module_init, "RubyNetwork");

} // namespace gem5

namespace gem5
{

namespace
{

class DummySimpleNetworkParamsClass
{
  public:
    gem5::ruby::SimpleNetwork *create() const;
};

template <class CxxClass, class Enable=void>
class DummySimpleNetworkShunt;

template <class CxxClass>
class DummySimpleNetworkShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass,
        const SimpleNetworkParams &>>>
{
  public:
    using Params = SimpleNetworkParams;
    static gem5::ruby::SimpleNetwork *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummySimpleNetworkShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass,
        const SimpleNetworkParams &>>>
{
  public:
    using Params = DummySimpleNetworkParamsClass;
    static gem5::ruby::SimpleNetwork *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

[[maybe_unused]] gem5::ruby::SimpleNetwork *
DummySimpleNetworkShunt<gem5::ruby::SimpleNetwork>::Params::create() const
{
    return DummySimpleNetworkShunt<gem5::ruby::SimpleNetwork>::
        create(*this);
}

} // namespace gem5
