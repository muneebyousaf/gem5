/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:62
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/SouthBridge.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "dev/x86/south_bridge.hh"

#include "dev/x86/cmos.hh"
#include "dev/x86/i8237.hh"
#include "dev/x86/i82094aa.hh"
#include "dev/x86/i8042.hh"
#include "dev/x86/i8259.hh"
#include "dev/x86/i8259.hh"
#include "dev/x86/i8254.hh"
#include "dev/x86/speaker.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_SouthBridge");
    py::class_<SouthBridgeParams, SimObjectParams, std::unique_ptr<SouthBridgeParams, py::nodelete>>(m, "SouthBridgeParams")
        .def(py::init<>())
        .def("create", &SouthBridgeParams::create)
        .def_readwrite("cmos", &SouthBridgeParams::cmos)
        .def_readwrite("dma1", &SouthBridgeParams::dma1)
        .def_readwrite("io_apic", &SouthBridgeParams::io_apic)
        .def_readwrite("keyboard", &SouthBridgeParams::keyboard)
        .def_readwrite("pic1", &SouthBridgeParams::pic1)
        .def_readwrite("pic2", &SouthBridgeParams::pic2)
        .def_readwrite("pit", &SouthBridgeParams::pit)
        .def_readwrite("speaker", &SouthBridgeParams::speaker)
        ;

    py::class_<gem5::SouthBridge, gem5::SimObject, std::unique_ptr<gem5::SouthBridge, py::nodelete>>(m, "gem5_COLONS_SouthBridge")
        ;

}

static EmbeddedPyBind embed_obj("SouthBridge", module_init, "SimObject");

} // namespace gem5

namespace gem5
{

namespace
{

class DummySouthBridgeParamsClass
{
  public:
    gem5::SouthBridge *create() const;
};

template <class CxxClass, class Enable=void>
class DummySouthBridgeShunt;

template <class CxxClass>
class DummySouthBridgeShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass,
        const SouthBridgeParams &>>>
{
  public:
    using Params = SouthBridgeParams;
    static gem5::SouthBridge *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummySouthBridgeShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass,
        const SouthBridgeParams &>>>
{
  public:
    using Params = DummySouthBridgeParamsClass;
    static gem5::SouthBridge *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

[[maybe_unused]] gem5::SouthBridge *
DummySouthBridgeShunt<gem5::SouthBridge>::Params::create() const
{
    return DummySouthBridgeShunt<gem5::SouthBridge>::
        create(*this);
}

} // namespace gem5
