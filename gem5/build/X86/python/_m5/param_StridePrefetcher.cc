/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:62
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/StridePrefetcher.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "mem/cache/prefetch/stride.hh"

#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "mem/cache/tags/indexing_policies/base.hh"
#include "mem/cache/replacement_policies/base.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_StridePrefetcher");
    py::class_<StridePrefetcherParams, QueuedPrefetcherParams, std::unique_ptr<StridePrefetcherParams, py::nodelete>>(m, "StridePrefetcherParams")
        .def(py::init<>())
        .def("create", &StridePrefetcherParams::create)
        .def_readwrite("confidence_counter_bits", &StridePrefetcherParams::confidence_counter_bits)
        .def_readwrite("confidence_threshold", &StridePrefetcherParams::confidence_threshold)
        .def_readwrite("degree", &StridePrefetcherParams::degree)
        .def_readwrite("initial_confidence", &StridePrefetcherParams::initial_confidence)
        .def_readwrite("table_assoc", &StridePrefetcherParams::table_assoc)
        .def_readwrite("table_entries", &StridePrefetcherParams::table_entries)
        .def_readwrite("table_indexing_policy", &StridePrefetcherParams::table_indexing_policy)
        .def_readwrite("table_replacement_policy", &StridePrefetcherParams::table_replacement_policy)
        .def_readwrite("use_requestor_id", &StridePrefetcherParams::use_requestor_id)
        ;

    py::class_<gem5::prefetch::Stride, gem5::prefetch::Queued, std::unique_ptr<gem5::prefetch::Stride, py::nodelete>>(m, "gem5_COLONS_prefetch_COLONS_Stride")
        ;

}

static EmbeddedPyBind embed_obj("StridePrefetcher", module_init, "QueuedPrefetcher");

} // namespace gem5

namespace gem5
{

namespace
{

class DummyStridePrefetcherParamsClass
{
  public:
    gem5::prefetch::Stride *create() const;
};

template <class CxxClass, class Enable=void>
class DummyStridePrefetcherShunt;

template <class CxxClass>
class DummyStridePrefetcherShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass,
        const StridePrefetcherParams &>>>
{
  public:
    using Params = StridePrefetcherParams;
    static gem5::prefetch::Stride *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummyStridePrefetcherShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass,
        const StridePrefetcherParams &>>>
{
  public:
    using Params = DummyStridePrefetcherParamsClass;
    static gem5::prefetch::Stride *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

[[maybe_unused]] gem5::prefetch::Stride *
DummyStridePrefetcherShunt<gem5::prefetch::Stride>::Params::create() const
{
    return DummyStridePrefetcherShunt<gem5::prefetch::Stride>::
        create(*this);
}

} // namespace gem5
