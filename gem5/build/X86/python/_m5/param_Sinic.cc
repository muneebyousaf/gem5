/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:62
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/Sinic.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "dev/net/sinic.hh"

#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_Sinic");
    py::class_<SinicParams, EtherDevBaseParams, std::unique_ptr<SinicParams, py::nodelete>>(m, "SinicParams")
        .def(py::init<>())
        .def("create", &SinicParams::create)
        .def_readwrite("delay_copy", &SinicParams::delay_copy)
        .def_readwrite("rx_fifo_low_mark", &SinicParams::rx_fifo_low_mark)
        .def_readwrite("rx_fifo_threshold", &SinicParams::rx_fifo_threshold)
        .def_readwrite("rx_max_copy", &SinicParams::rx_max_copy)
        .def_readwrite("rx_max_intr", &SinicParams::rx_max_intr)
        .def_readwrite("tx_fifo_high_mark", &SinicParams::tx_fifo_high_mark)
        .def_readwrite("tx_fifo_threshold", &SinicParams::tx_fifo_threshold)
        .def_readwrite("tx_max_copy", &SinicParams::tx_max_copy)
        .def_readwrite("virtual_addr", &SinicParams::virtual_addr)
        .def_readwrite("virtual_count", &SinicParams::virtual_count)
        .def_readwrite("zero_copy", &SinicParams::zero_copy)
        .def_readwrite("zero_copy_size", &SinicParams::zero_copy_size)
        .def_readwrite("zero_copy_threshold", &SinicParams::zero_copy_threshold)
        ;

    py::class_<gem5::sinic::Device, gem5::EtherDevBase, std::unique_ptr<gem5::sinic::Device, py::nodelete>>(m, "gem5_COLONS_sinic_COLONS_Device")
        ;

}

static EmbeddedPyBind embed_obj("Sinic", module_init, "EtherDevBase");

} // namespace gem5

namespace gem5
{

namespace
{

class DummySinicParamsClass
{
  public:
    gem5::sinic::Device *create() const;
};

template <class CxxClass, class Enable=void>
class DummySinicShunt;

template <class CxxClass>
class DummySinicShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass,
        const SinicParams &>>>
{
  public:
    using Params = SinicParams;
    static gem5::sinic::Device *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummySinicShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass,
        const SinicParams &>>>
{
  public:
    using Params = DummySinicParamsClass;
    static gem5::sinic::Device *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

[[maybe_unused]] gem5::sinic::Device *
DummySinicShunt<gem5::sinic::Device>::Params::create() const
{
    return DummySinicShunt<gem5::sinic::Device>::
        create(*this);
}

} // namespace gem5
