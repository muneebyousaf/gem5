/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:62
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/RubySystem.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "mem/ruby/system/RubySystem.hh"

#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "mem/simple_mem.hh"
#include "sim/system.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_RubySystem");
    py::class_<RubySystemParams, ClockedObjectParams, std::unique_ptr<RubySystemParams, py::nodelete>>(m, "RubySystemParams")
        .def(py::init<>())
        .def("create", &RubySystemParams::create)
        .def_readwrite("access_backing_store", &RubySystemParams::access_backing_store)
        .def_readwrite("all_instructions", &RubySystemParams::all_instructions)
        .def_readwrite("block_size_bytes", &RubySystemParams::block_size_bytes)
        .def_readwrite("hot_lines", &RubySystemParams::hot_lines)
        .def_readwrite("memory_size_bits", &RubySystemParams::memory_size_bits)
        .def_readwrite("num_of_sequencers", &RubySystemParams::num_of_sequencers)
        .def_readwrite("number_of_virtual_networks", &RubySystemParams::number_of_virtual_networks)
        .def_readwrite("phys_mem", &RubySystemParams::phys_mem)
        .def_readwrite("randomization", &RubySystemParams::randomization)
        .def_readwrite("system", &RubySystemParams::system)
        ;

    py::class_<gem5::ruby::RubySystem, gem5::ClockedObject, std::unique_ptr<gem5::ruby::RubySystem, py::nodelete>>(m, "gem5_COLONS_ruby_COLONS_RubySystem")
        ;

}

static EmbeddedPyBind embed_obj("RubySystem", module_init, "ClockedObject");

} // namespace gem5

namespace gem5
{

namespace
{

class DummyRubySystemParamsClass
{
  public:
    gem5::ruby::RubySystem *create() const;
};

template <class CxxClass, class Enable=void>
class DummyRubySystemShunt;

template <class CxxClass>
class DummyRubySystemShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass,
        const RubySystemParams &>>>
{
  public:
    using Params = RubySystemParams;
    static gem5::ruby::RubySystem *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummyRubySystemShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass,
        const RubySystemParams &>>>
{
  public:
    using Params = DummyRubySystemParamsClass;
    static gem5::ruby::RubySystem *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

[[maybe_unused]] gem5::ruby::RubySystem *
DummyRubySystemShunt<gem5::ruby::RubySystem>::Params::create() const
{
    return DummyRubySystemShunt<gem5::ruby::RubySystem>::
        create(*this);
}

} // namespace gem5
