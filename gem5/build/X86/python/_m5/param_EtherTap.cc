/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:62
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/EtherTap.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "dev/net/ethertap.hh"

#include <string>
#include <string>
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_EtherTap");
    py::class_<EtherTapParams, EtherTapBaseParams, std::unique_ptr<EtherTapParams, py::nodelete>>(m, "EtherTapParams")
        .def(py::init<>())
        .def("create", &EtherTapParams::create)
        .def_readwrite("tap_device_name", &EtherTapParams::tap_device_name)
        .def_readwrite("tun_clone_device", &EtherTapParams::tun_clone_device)
        ;

    py::class_<gem5::EtherTap, gem5::EtherTapBase, std::unique_ptr<gem5::EtherTap, py::nodelete>>(m, "gem5_COLONS_EtherTap")
        ;

}

static EmbeddedPyBind embed_obj("EtherTap", module_init, "EtherTapBase");

} // namespace gem5

namespace gem5
{

namespace
{

class DummyEtherTapParamsClass
{
  public:
    gem5::EtherTap *create() const;
};

template <class CxxClass, class Enable=void>
class DummyEtherTapShunt;

template <class CxxClass>
class DummyEtherTapShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass,
        const EtherTapParams &>>>
{
  public:
    using Params = EtherTapParams;
    static gem5::EtherTap *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummyEtherTapShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass,
        const EtherTapParams &>>>
{
  public:
    using Params = DummyEtherTapParamsClass;
    static gem5::EtherTap *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

[[maybe_unused]] gem5::EtherTap *
DummyEtherTapShunt<gem5::EtherTap>::Params::create() const
{
    return DummyEtherTapShunt<gem5::EtherTap>::
        create(*this);
}

} // namespace gem5
