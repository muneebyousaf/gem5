/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:62
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/MPP_TAGE.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "cpu/pred/multiperspective_perceptron_tage.hh"

#include <vector>
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_MPP_TAGE");
    py::class_<MPP_TAGEParams, TAGEBaseParams, std::unique_ptr<MPP_TAGEParams, py::nodelete>>(m, "MPP_TAGEParams")
        .def(py::init<>())
        .def("create", &MPP_TAGEParams::create)
        .def_readwrite("tunedHistoryLengths", &MPP_TAGEParams::tunedHistoryLengths)
        ;

    py::class_<gem5::branch_prediction::MPP_TAGE, gem5::branch_prediction::TAGEBase, std::unique_ptr<gem5::branch_prediction::MPP_TAGE, py::nodelete>>(m, "gem5_COLONS_branch_prediction_COLONS_MPP_TAGE")
        ;

}

static EmbeddedPyBind embed_obj("MPP_TAGE", module_init, "TAGEBase");

} // namespace gem5

namespace gem5
{

namespace
{

class DummyMPP_TAGEParamsClass
{
  public:
    gem5::branch_prediction::MPP_TAGE *create() const;
};

template <class CxxClass, class Enable=void>
class DummyMPP_TAGEShunt;

template <class CxxClass>
class DummyMPP_TAGEShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass,
        const MPP_TAGEParams &>>>
{
  public:
    using Params = MPP_TAGEParams;
    static gem5::branch_prediction::MPP_TAGE *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummyMPP_TAGEShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass,
        const MPP_TAGEParams &>>>
{
  public:
    using Params = DummyMPP_TAGEParamsClass;
    static gem5::branch_prediction::MPP_TAGE *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

[[maybe_unused]] gem5::branch_prediction::MPP_TAGE *
DummyMPP_TAGEShunt<gem5::branch_prediction::MPP_TAGE>::Params::create() const
{
    return DummyMPP_TAGEShunt<gem5::branch_prediction::MPP_TAGE>::
        create(*this);
}

} // namespace gem5
