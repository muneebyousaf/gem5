/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:62
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/SimpleCache.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "learning_gem5/part2/simple_cache.hh"

#include "base/types.hh"
#include "base/types.hh"
#include "sim/system.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_SimpleCache");
    py::class_<SimpleCacheParams, ClockedObjectParams, std::unique_ptr<SimpleCacheParams, py::nodelete>>(m, "SimpleCacheParams")
        .def(py::init<>())
        .def("create", &SimpleCacheParams::create)
        .def_readwrite("latency", &SimpleCacheParams::latency)
        .def_readwrite("size", &SimpleCacheParams::size)
        .def_readwrite("system", &SimpleCacheParams::system)
        .def_readwrite("port_cpu_side_connection_count", &SimpleCacheParams::port_cpu_side_connection_count)
        .def_readwrite("port_mem_side_connection_count", &SimpleCacheParams::port_mem_side_connection_count)
        ;

    py::class_<gem5::SimpleCache, gem5::ClockedObject, std::unique_ptr<gem5::SimpleCache, py::nodelete>>(m, "gem5_COLONS_SimpleCache")
        ;

}

static EmbeddedPyBind embed_obj("SimpleCache", module_init, "ClockedObject");

} // namespace gem5

namespace gem5
{

namespace
{

class DummySimpleCacheParamsClass
{
  public:
    gem5::SimpleCache *create() const;
};

template <class CxxClass, class Enable=void>
class DummySimpleCacheShunt;

template <class CxxClass>
class DummySimpleCacheShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass,
        const SimpleCacheParams &>>>
{
  public:
    using Params = SimpleCacheParams;
    static gem5::SimpleCache *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummySimpleCacheShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass,
        const SimpleCacheParams &>>>
{
  public:
    using Params = DummySimpleCacheParamsClass;
    static gem5::SimpleCache *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

[[maybe_unused]] gem5::SimpleCache *
DummySimpleCacheShunt<gem5::SimpleCache>::Params::create() const
{
    return DummySimpleCacheShunt<gem5::SimpleCache>::
        create(*this);
}

} // namespace gem5
