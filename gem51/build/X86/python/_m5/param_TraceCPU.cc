/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:62
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/TraceCPU.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "cpu/trace/trace_cpu.hh"

#include <string>
#include <string>
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_TraceCPU");
    py::class_<TraceCPUParams, BaseCPUParams, std::unique_ptr<TraceCPUParams, py::nodelete>>(m, "TraceCPUParams")
        .def(py::init<>())
        .def("create", &TraceCPUParams::create)
        .def_readwrite("dataTraceFile", &TraceCPUParams::dataTraceFile)
        .def_readwrite("enableEarlyExit", &TraceCPUParams::enableEarlyExit)
        .def_readwrite("freqMultiplier", &TraceCPUParams::freqMultiplier)
        .def_readwrite("instTraceFile", &TraceCPUParams::instTraceFile)
        .def_readwrite("progressMsgInterval", &TraceCPUParams::progressMsgInterval)
        .def_readwrite("sizeLoadBuffer", &TraceCPUParams::sizeLoadBuffer)
        .def_readwrite("sizeROB", &TraceCPUParams::sizeROB)
        .def_readwrite("sizeStoreBuffer", &TraceCPUParams::sizeStoreBuffer)
        ;

    py::class_<gem5::TraceCPU, gem5::BaseCPU, std::unique_ptr<gem5::TraceCPU, py::nodelete>>(m, "gem5_COLONS_TraceCPU")
        ;

}

static EmbeddedPyBind embed_obj("TraceCPU", module_init, "BaseCPU");

} // namespace gem5

namespace gem5
{

namespace
{

class DummyTraceCPUParamsClass
{
  public:
    gem5::TraceCPU *create() const;
};

template <class CxxClass, class Enable=void>
class DummyTraceCPUShunt;

template <class CxxClass>
class DummyTraceCPUShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass,
        const TraceCPUParams &>>>
{
  public:
    using Params = TraceCPUParams;
    static gem5::TraceCPU *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummyTraceCPUShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass,
        const TraceCPUParams &>>>
{
  public:
    using Params = DummyTraceCPUParamsClass;
    static gem5::TraceCPU *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

[[maybe_unused]] gem5::TraceCPU *
DummyTraceCPUShunt<gem5::TraceCPU>::Params::create() const
{
    return DummyTraceCPUShunt<gem5::TraceCPU>::
        create(*this);
}

} // namespace gem5
