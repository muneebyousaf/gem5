/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:62
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/MessageBuffer.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "mem/ruby/network/MessageBuffer.hh"

#include "base/types.hh"
#include "enums/MessageRandomization.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_MessageBuffer");
    py::class_<MessageBufferParams, SimObjectParams, std::unique_ptr<MessageBufferParams, py::nodelete>>(m, "MessageBufferParams")
        .def(py::init<>())
        .def("create", &MessageBufferParams::create)
        .def_readwrite("allow_zero_latency", &MessageBufferParams::allow_zero_latency)
        .def_readwrite("buffer_size", &MessageBufferParams::buffer_size)
        .def_readwrite("ordered", &MessageBufferParams::ordered)
        .def_readwrite("randomization", &MessageBufferParams::randomization)
        .def_readwrite("port_out_port_connection_count", &MessageBufferParams::port_out_port_connection_count)
        .def_readwrite("port_in_port_connection_count", &MessageBufferParams::port_in_port_connection_count)
        ;

    py::class_<gem5::ruby::MessageBuffer, gem5::SimObject, std::unique_ptr<gem5::ruby::MessageBuffer, py::nodelete>>(m, "gem5_COLONS_ruby_COLONS_MessageBuffer")
        ;

}

static EmbeddedPyBind embed_obj("MessageBuffer", module_init, "SimObject");

} // namespace gem5

namespace gem5
{

namespace
{

class DummyMessageBufferParamsClass
{
  public:
    gem5::ruby::MessageBuffer *create() const;
};

template <class CxxClass, class Enable=void>
class DummyMessageBufferShunt;

template <class CxxClass>
class DummyMessageBufferShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass,
        const MessageBufferParams &>>>
{
  public:
    using Params = MessageBufferParams;
    static gem5::ruby::MessageBuffer *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummyMessageBufferShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass,
        const MessageBufferParams &>>>
{
  public:
    using Params = DummyMessageBufferParamsClass;
    static gem5::ruby::MessageBuffer *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

[[maybe_unused]] gem5::ruby::MessageBuffer *
DummyMessageBufferShunt<gem5::ruby::MessageBuffer>::Params::create() const
{
    return DummyMessageBufferShunt<gem5::ruby::MessageBuffer>::
        create(*this);
}

} // namespace gem5
