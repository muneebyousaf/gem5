/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:62
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/BloomFilterBlock.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "base/filters/block_bloom_filter.hh"

#include <vector>
#include "base/types.hh"
#include <vector>
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_BloomFilterBlock");
    py::class_<BloomFilterBlockParams, BloomFilterBaseParams, std::unique_ptr<BloomFilterBlockParams, py::nodelete>>(m, "BloomFilterBlockParams")
        .def(py::init<>())
        .def("create", &BloomFilterBlockParams::create)
        .def_readwrite("masks_lsbs", &BloomFilterBlockParams::masks_lsbs)
        .def_readwrite("masks_sizes", &BloomFilterBlockParams::masks_sizes)
        ;

    py::class_<gem5::bloom_filter::Block, gem5::bloom_filter::Base, std::unique_ptr<gem5::bloom_filter::Block, py::nodelete>>(m, "gem5_COLONS_bloom_filter_COLONS_Block")
        ;

}

static EmbeddedPyBind embed_obj("BloomFilterBlock", module_init, "BloomFilterBase");

} // namespace gem5

namespace gem5
{

namespace
{

class DummyBloomFilterBlockParamsClass
{
  public:
    gem5::bloom_filter::Block *create() const;
};

template <class CxxClass, class Enable=void>
class DummyBloomFilterBlockShunt;

template <class CxxClass>
class DummyBloomFilterBlockShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass,
        const BloomFilterBlockParams &>>>
{
  public:
    using Params = BloomFilterBlockParams;
    static gem5::bloom_filter::Block *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummyBloomFilterBlockShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass,
        const BloomFilterBlockParams &>>>
{
  public:
    using Params = DummyBloomFilterBlockParamsClass;
    static gem5::bloom_filter::Block *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

[[maybe_unused]] gem5::bloom_filter::Block *
DummyBloomFilterBlockShunt<gem5::bloom_filter::Block>::Params::create() const
{
    return DummyBloomFilterBlockShunt<gem5::bloom_filter::Block>::
        create(*this);
}

} // namespace gem5
