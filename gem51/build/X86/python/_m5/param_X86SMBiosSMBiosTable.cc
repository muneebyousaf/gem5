/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:62
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/X86SMBiosSMBiosTable.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "arch/x86/bios/smbios.hh"

#include "base/types.hh"
#include "base/types.hh"
#include <vector>
#include "arch/x86/bios/smbios.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_X86SMBiosSMBiosTable");
    py::class_<X86SMBiosSMBiosTableParams, SimObjectParams, std::unique_ptr<X86SMBiosSMBiosTableParams, py::nodelete>>(m, "X86SMBiosSMBiosTableParams")
        .def(py::init<>())
        .def("create", &X86SMBiosSMBiosTableParams::create)
        .def_readwrite("major_version", &X86SMBiosSMBiosTableParams::major_version)
        .def_readwrite("minor_version", &X86SMBiosSMBiosTableParams::minor_version)
        .def_readwrite("structures", &X86SMBiosSMBiosTableParams::structures)
        ;

    py::class_<gem5::X86ISA::smbios::SMBiosTable, gem5::SimObject, std::unique_ptr<gem5::X86ISA::smbios::SMBiosTable, py::nodelete>>(m, "gem5_COLONS_X86ISA_COLONS_smbios_COLONS_SMBiosTable")
        ;

}

static EmbeddedPyBind embed_obj("X86SMBiosSMBiosTable", module_init, "SimObject");

} // namespace gem5

namespace gem5
{

namespace
{

class DummyX86SMBiosSMBiosTableParamsClass
{
  public:
    gem5::X86ISA::smbios::SMBiosTable *create() const;
};

template <class CxxClass, class Enable=void>
class DummyX86SMBiosSMBiosTableShunt;

template <class CxxClass>
class DummyX86SMBiosSMBiosTableShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass,
        const X86SMBiosSMBiosTableParams &>>>
{
  public:
    using Params = X86SMBiosSMBiosTableParams;
    static gem5::X86ISA::smbios::SMBiosTable *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummyX86SMBiosSMBiosTableShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass,
        const X86SMBiosSMBiosTableParams &>>>
{
  public:
    using Params = DummyX86SMBiosSMBiosTableParamsClass;
    static gem5::X86ISA::smbios::SMBiosTable *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

[[maybe_unused]] gem5::X86ISA::smbios::SMBiosTable *
DummyX86SMBiosSMBiosTableShunt<gem5::X86ISA::smbios::SMBiosTable>::Params::create() const
{
    return DummyX86SMBiosSMBiosTableShunt<gem5::X86ISA::smbios::SMBiosTable>::
        create(*this);
}

} // namespace gem5
