/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:62
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/MemCtrl.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "mem/mem_ctrl.hh"

#include "base/types.hh"
#include "mem/mem_interface.hh"
#include "enums/MemSched.hh"
#include "base/types.hh"
#include "mem/mem_interface.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_MemCtrl");
    py::class_<MemCtrlParams, QoSMemCtrlParams, std::unique_ptr<MemCtrlParams, py::nodelete>>(m, "MemCtrlParams")
        .def(py::init<>())
        .def("create", &MemCtrlParams::create)
        .def_readwrite("command_window", &MemCtrlParams::command_window)
        .def_readwrite("dram", &MemCtrlParams::dram)
        .def_readwrite("mem_sched_policy", &MemCtrlParams::mem_sched_policy)
        .def_readwrite("min_writes_per_switch", &MemCtrlParams::min_writes_per_switch)
        .def_readwrite("nvm", &MemCtrlParams::nvm)
        .def_readwrite("static_backend_latency", &MemCtrlParams::static_backend_latency)
        .def_readwrite("static_frontend_latency", &MemCtrlParams::static_frontend_latency)
        .def_readwrite("write_high_thresh_perc", &MemCtrlParams::write_high_thresh_perc)
        .def_readwrite("write_low_thresh_perc", &MemCtrlParams::write_low_thresh_perc)
        .def_readwrite("port_port_connection_count", &MemCtrlParams::port_port_connection_count)
        ;

    py::class_<gem5::memory::MemCtrl, gem5::memory::qos::MemCtrl, std::unique_ptr<gem5::memory::MemCtrl, py::nodelete>>(m, "gem5_COLONS_memory_COLONS_MemCtrl")
        ;

}

static EmbeddedPyBind embed_obj("MemCtrl", module_init, "QoSMemCtrl");

} // namespace gem5

namespace gem5
{

namespace
{

class DummyMemCtrlParamsClass
{
  public:
    gem5::memory::MemCtrl *create() const;
};

template <class CxxClass, class Enable=void>
class DummyMemCtrlShunt;

template <class CxxClass>
class DummyMemCtrlShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass,
        const MemCtrlParams &>>>
{
  public:
    using Params = MemCtrlParams;
    static gem5::memory::MemCtrl *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummyMemCtrlShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass,
        const MemCtrlParams &>>>
{
  public:
    using Params = DummyMemCtrlParamsClass;
    static gem5::memory::MemCtrl *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

[[maybe_unused]] gem5::memory::MemCtrl *
DummyMemCtrlShunt<gem5::memory::MemCtrl>::Params::create() const
{
    return DummyMemCtrlShunt<gem5::memory::MemCtrl>::
        create(*this);
}

} // namespace gem5
