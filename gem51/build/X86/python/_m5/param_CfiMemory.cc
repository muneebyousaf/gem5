/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:62
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/CfiMemory.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "mem/cfi_mem.hh"

#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_CfiMemory");
    py::class_<CfiMemoryParams, AbstractMemoryParams, std::unique_ptr<CfiMemoryParams, py::nodelete>>(m, "CfiMemoryParams")
        .def(py::init<>())
        .def("create", &CfiMemoryParams::create)
        .def_readwrite("bandwidth", &CfiMemoryParams::bandwidth)
        .def_readwrite("bank_width", &CfiMemoryParams::bank_width)
        .def_readwrite("blk_size", &CfiMemoryParams::blk_size)
        .def_readwrite("device_id", &CfiMemoryParams::device_id)
        .def_readwrite("latency", &CfiMemoryParams::latency)
        .def_readwrite("latency_var", &CfiMemoryParams::latency_var)
        .def_readwrite("vendor_id", &CfiMemoryParams::vendor_id)
        .def_readwrite("port_port_connection_count", &CfiMemoryParams::port_port_connection_count)
        ;

    py::class_<gem5::memory::CfiMemory, gem5::memory::AbstractMemory, std::unique_ptr<gem5::memory::CfiMemory, py::nodelete>>(m, "gem5_COLONS_memory_COLONS_CfiMemory")
        ;

}

static EmbeddedPyBind embed_obj("CfiMemory", module_init, "AbstractMemory");

} // namespace gem5

namespace gem5
{

namespace
{

class DummyCfiMemoryParamsClass
{
  public:
    gem5::memory::CfiMemory *create() const;
};

template <class CxxClass, class Enable=void>
class DummyCfiMemoryShunt;

template <class CxxClass>
class DummyCfiMemoryShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass,
        const CfiMemoryParams &>>>
{
  public:
    using Params = CfiMemoryParams;
    static gem5::memory::CfiMemory *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummyCfiMemoryShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass,
        const CfiMemoryParams &>>>
{
  public:
    using Params = DummyCfiMemoryParamsClass;
    static gem5::memory::CfiMemory *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

[[maybe_unused]] gem5::memory::CfiMemory *
DummyCfiMemoryShunt<gem5::memory::CfiMemory>::Params::create() const
{
    return DummyCfiMemoryShunt<gem5::memory::CfiMemory>::
        create(*this);
}

} // namespace gem5
