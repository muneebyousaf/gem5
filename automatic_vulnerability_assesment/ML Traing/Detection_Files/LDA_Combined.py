############## Required Libraries #################
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn import tree
from sklearn import svm
from sklearn.svm import SVC 
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis as QDA
from sklearn.metrics import confusion_matrix
from sklearn import linear_model
from sklearn.model_selection import cross_val_score
import csv

##################  Reading data ################
data1 = pd.read_csv('Train_Combined.csv') 
data=data1.values
Data = np.array(data1.drop(['Label'], 1))


data_val = pd.read_csv('Test.csv')
X_val = np.array(data_val.drop(['Label'], 1))
Y_val = data_val.Label



################### splitting into training,validation and test sets ################
number_of_samples= len (data1.Label)
random_indices =np.random.permutation(number_of_samples)
                         #Training set
num_training_samples=int(number_of_samples*1)
X_train=Data[random_indices[:num_training_samples]]
Y_train=data1.Label[random_indices[:num_training_samples]]
'''
                           #Validation set
num_validation_samples=int(number_of_samples*0.3)
X_val=Data[random_indices[num_training_samples :num_training_samples+num_validation_samples]]
Y_val=data1.Label[random_indices[num_training_samples :num_training_samples+num_validation_samples]]
'''
################## Model Selection ################

clf = LDA()
model = clf.fit(X_train, Y_train)
scores = cross_val_score(clf, X_train, Y_train, cv=5)
print scores                                              

################## Taking Inputfrom user ################

print accuracy_score(Y_val,clf.predict(X_val))*100
'''
a1=raw_input('L1 DCM:')
a2=raw_input('L1 ICM:')
a3=raw_input('L1 TCM:')
a4=raw_input('L2 ICA:')
a5=raw_input('L2 ICM:')
a6=raw_input('L2 TCA:')
a7=raw_input('L2 TCM:')
a8=raw_input('L3 ICA:')
a9=raw_input('L3 TCA:')
a10=raw_input('L3 TCM:')
a11=raw_input('BR MSP:')
a12=raw_input('TOT CYC:')

y = [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12]
#y= [248,58401,49286,164378,43193,101597,45441,41749,44260,43490,214619,58313916]
Y= np.array([y], np.int64)
Result = clf.predict(Y);
if (Result==[0]):
 print 'Normal'
else:
 print 'under Attack'
'''
